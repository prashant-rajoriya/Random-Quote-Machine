{"version":3,"sources":["Quote/index.js","RandomQuote/index.js","App.js","serviceWorker.js","index.js"],"names":["Quote","_ref","quote","author","react_default","a","createElement","className","id","RandomQuote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","currentQuote","undefined","handleClick","bind","assertThisInitialized","getRandomQuote","_this$state$quotes$Ma","Math","floor","random","length","setState","_this2","_this$state$currentQu","src_Quote","href","onClick","Component","App","src_RandomQuote","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f4c425e.chunk.js","sourcesContent":["import React from 'react';\nimport './Quote.css'\n\nconst Quote = ({quote, author}) => {\n    return (\n      <div className='quotes'>\n        <h1 id='text'><i className='fa fa-quote-left'/>{quote}</h1>\n        <h4 id='author'>--{author}</h4>\n      </div>\n    );\n  }\n\nexport default Quote;","import React, { Component } from 'react';\nimport Quote from '../Quote'\nimport './RandomQuote.css';\n\nclass RandomQuote extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes : [\n        {\n          id : 0,\n          author : 'Carol Burnett',\n          quote : 'Only I can change my life. No one can do it for me.'\n        },\n        {\n          id : 1,\n          author : 'Charles R. Swindoll',\n          quote : 'Life is 10% what happens to you and 90% how you react to it.'\n        },\n        {\n          id : 2,\n          author : \"Madeleine L'Engle\",\n          quote : 'You have to write the book that wants to be written. And if the book will be too difficult for grown-ups, then you write it for children.'\n        },\n        {\n          id : 3,\n          author : 'Stephen King',\n          quote : \"If you don't have time to read, you don't have the time (or the tools) to write. Simple as that.\"\n        },\n        {\n          id : 4,\n          author : 'Anaïs Nin',\n          quote : \"We write to taste life twice, in the moment and in retrospect.\"\n        },\n        {\n          id : 5,\n          author : 'Mark Twain',\n          quote : \"Substitute 'damn' every time you're inclined to write 'very;' your editor will delete it and the writing will be just as it should be.\"\n        },\n        {\n          id : 6,\n          author : 'Toni Morrison',\n          quote : \"If there's a book that you want to read, but it hasn't been written yet, then you must write it.\"\n        },\n        {\n          id : 7,\n          author : 'Jack Kerouac, The Dharma Bums',\n          quote : \"One day I will find the right words, and they will be simple.\"\n        },\n        {\n          id : 8,\n          author : 'Benjamin Franklin',\n          quote : \"Either write something worth reading or do something worth writing.\"\n        },\n        {\n          id : 9,\n          author : 'Saul Bellow',\n          quote : \"You never have to change anything you got up in the middle of the night to write.\"\n        },\n        {\n          id : 10,\n          author : 'William Faulkner',\n          quote : \"Read, read, read. Read everything -- trash, classics, good and bad, and see how they do it. Just like a carpenter who works as an apprentice and studies the master. Read! You'll absorb it. Then write. If it's good, you'll find out. If it's not, throw it out of the window.\"\n        },\n        {\n          id : 11,\n          author : 'Virginia Woolf',\n          quote : \"Writing is like sex. First you do it for love, then you do it for your friends, and then you do it for money.\"\n        },\n      ],\n      currentQuote : {\n        id : undefined,\n        quote : undefined,\n        author : undefined,\n      }\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentWillMount(){\n    this.getRandomQuote();\n  }\n  \n  getRandomQuote(){\n    let {id, quote, author} = this.state.quotes[Math.floor(Math.random() * this.state.quotes.length)];\n\n    this.setState({currentQuote : {id, quote, author}})\n    return this.state.currentQuote;\n  }\n\n  handleClick(){\n    const {id} = this.state.currentQuote.id;\n    this.getRandomQuote();\n    while(this.state.currentQuote.id === id){\n      this.getRandomQuote();\n    }\n  }\n\n  render() {\n\n    const { quote, author} = this.state.currentQuote;\n\n    return (\n      <div id='quote-box'>\n        <Quote quote={quote} author={author}/>\n        <div className='myButtons'>\n          <a \n            id='tweet-quote'\n            href='twitter.com/intent/tweet'>\n            <i className=\"fab fa-twitter-square fa-3x\"/></a>\n            <button\n              id='new-quote'\n              onClick={() => this.handleClick()}\n            >New Quote</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RandomQuote;","import React, { Component } from 'react';\nimport RandomQuote from './RandomQuote';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <RandomQuote/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}